function love.load()
	love.physics.setMeter(64) --the height of a meter our worlds will be 64px
	pontos=0
	recorde=0
	world = love.physics.newWorld(0, 9.81*64, true)
		world:setCallbacks(beginContact, endContact, preSolve, postSolve)
	local width,height = 500, 700
	
	objects = {} 
	objects.quadrado = {}
		objects.quadrado.shape = love.physics.newRectangleShape( 20, 20, 60, 60, 0 )
		objects.quadrado.body = love.physics.newBody( world, 20, 20, "dynamic" )
		objects.quadrado.body:setMass(10) 
		objects.quadrado.fixture = love.physics.newFixture( objects.quadrado.body, objects.quadrado.shape, 2 )
		objects.quadrado.fixture:setRestitution(0.5)
		objects.quadrado.fixture:setUserData(1)		
	objects.bala = {}
		objects.bala.shape = love.physics.newRectangleShape( 25, 0, 50, 5, 0)
		objects.bala.body = love.physics.newBody( world, 999, 0, "kinematic" )
		objects.bala.body:setBullet(true)
		objects.bala.fixture = love.physics.newFixture( objects.bala.body, objects.bala.shape, 1)
		objects.bala.fixture:setUserData(2)	
	objects.ground = {}
		objects.ground.body = love.physics.newBody(world, width/2, height-50/2) 
		objects.ground.shape = love.physics.newRectangleShape(width, 50) 
		objects.ground.fixture = love.physics.newFixture(objects.ground.body, objects.ground.shape)
		objects.ground.fixture:setUserData(4)			
	
	objects.limit = {}
		objects.limit.body = love.physics.newBody(world, 0, 0,"static")
		objects.limit.shape = love.physics.newChainShape( true, width, 0, width, height, 0, height, 0, 0)
		objects.limit.fixture = love.physics.newFixture(objects.limit.body, objects.limit.shape)
		objects.limit.fixture:setUserData(3)	
	
	love.graphics.setBackgroundColor(104, 136, 248) 
    love.window.setMode(width, height)
end

function beginContact(a, b, coll)
 
end
 
function endContact(a, b, coll)
	if a:getUserData()==1 and b:getUserData()==2 then
		local body = b:getBody()
		body:setLinearVelocity(0, 0)
		pontos=pontos+5
	elseif a:getUserData()==3 and b:getUserData()==1 then
		pontos=pontos+5
	elseif a:getUserData()==1 and b:getUserData()==4 then
		if pontos>recorde then
			recorde=pontos
		end
		pontos=0
	end
end
 
function preSolve(a, b, coll)
 
end
 
function postSolve(a, b, coll, normalimpulse, tangentimpulse)
 
end

function love.update(dt)
  world:update(dt) 
  --input
  if love.keyboard.isDown("down") then --press the up arrow key to set the quadrado in the air
    objects.quadrado.body:setPosition(650/2, 650/2)
    objects.quadrado.body:setLinearVelocity(0, 0) --we must set the velocity to zero to prevent a potentially large velocity generated by the change in position
  elseif love.keyboard.isDown("q") then
	objects.bala.body:setPosition(0,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("w") then
	objects.bala.body:setPosition(50,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("e") then
	objects.bala.body:setPosition(100,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("r") then
	objects.bala.body:setPosition(150,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("t") then
	objects.bala.body:setPosition(200,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("y") then
	objects.bala.body:setPosition(250,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("u") then
	objects.bala.body:setPosition(300,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("i") then
	objects.bala.body:setPosition(350,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("o") then
	objects.bala.body:setPosition(400,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  elseif love.keyboard.isDown("p") then
	objects.bala.body:setPosition(450,650)
    objects.bala.body:setLinearVelocity(0, -450) 
  end

end

-- Draw a coloured rectangle.
function love.draw()
	love.graphics.setColor(72, 160, 14) --green
    love.graphics.polygon("fill", objects.ground.body:getWorldPoints(objects.ground.shape:getPoints()))
	love.graphics.setColor(50, 50, 50) --
    love.graphics.polygon("fill", objects.quadrado.body:getWorldPoints(objects.quadrado.shape:getPoints()))
	love.graphics.setColor(30, 120, 130) --grey
    love.graphics.polygon("fill", objects.bala.body:getWorldPoints(objects.bala.shape:getPoints()))
	love.graphics.setColor(255, 0, 0) --red
	for i=0,9 do
		love.graphics.line( 50*i, 650, 50*i, 500)
	end
	love.graphics.setColor(0, 0, 0) --black
	love.graphics.printf( "Q W E R T Y U I O P", 25, 655, 450, "justify")
	love.graphics.printf( pontos, 25, 20, 450, "left")
	love.graphics.printf( recorde, 0, 20, 475, "right")
end